# Generated by Django 5.1.5 on 2025-01-24 16:03

import django.core.validators
import django.db.models.deletion
import reportgen.models
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [('reportgen', '0001_initial'), ('reportgen', '0002_rename_company_name_report_report_for')]

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ClientContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_name', models.CharField(db_index=True, max_length=190)),
                ('client_contact', models.TextField()),
            ],
            options={
                'verbose_name': 'Client Contacts',
                'verbose_name_plural': 'Client Contacts',
            },
        ),
        migrations.CreateModel(
            name='Finding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('nessus_scan_name', models.CharField(db_index=True, help_text='Name of the Nessus scan or friendly engagment identifier to link to the engagement group.', max_length=190)),
                ('Plugin_ID', models.TextField(blank=True, null=True)),
                ('CVE', models.TextField(blank=True, null=True)),
                ('CVSS_v2_0_Base_Score', models.TextField(blank=True, null=True)),
                ('Risk', models.TextField(blank=True, null=True)),
                ('Host', models.TextField(blank=True, null=True)),
                ('Protocol', models.TextField(blank=True, null=True)),
                ('Port', models.TextField(blank=True, null=True)),
                ('Name', models.TextField(blank=True, null=True)),
                ('Synopsis', models.TextField(blank=True, null=True)),
                ('Description', models.TextField(blank=True, null=True)),
                ('Solution', models.TextField(blank=True, null=True)),
                ('See_Also', models.TextField(blank=True, null=True)),
                ('Plugin_Output', models.TextField(blank=True, null=True)),
                ('STIG_Severity', models.TextField(blank=True, null=True)),
                ('CVSS_v3_0_Base_Score', models.TextField(blank=True, null=True)),
                ('CVSS_v2_0_Temporal_Score', models.TextField(blank=True, null=True)),
                ('CVSS_v3_0_Temporal_Score', models.TextField(blank=True, null=True)),
                ('VPR_Score', models.TextField(blank=True, null=True)),
                ('Risk_Factor', models.TextField(blank=True, null=True)),
                ('BID', models.TextField(blank=True, null=True)),
                ('XREF', models.TextField(blank=True, null=True)),
                ('MSKB', models.TextField(blank=True, null=True)),
                ('Plugin_Publication_Date', models.TextField(blank=True, null=True)),
                ('Plugin_Modification_Date', models.TextField(blank=True, null=True)),
                ('Metasploit', models.TextField(blank=True, null=True)),
                ('Core_Impact', models.TextField(blank=True, null=True)),
                ('CANVAS', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Findings',
                'verbose_name_plural': 'Findings',
            },
        ),
        migrations.CreateModel(
            name='FindingScreenshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('finding_subtle', models.TextField()),
                ('finding_screenshot', models.ImageField(upload_to='findings/')),
            ],
            options={
                'verbose_name': 'Finding Screenshot',
                'verbose_name_plural': 'Finding Screenshot',
            },
        ),
        migrations.CreateModel(
            name='Improvement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('improvement_subtle', models.TextField()),
                ('improvement_screenshot', models.ImageField(blank=True, upload_to='improvements/')),
            ],
            options={
                'verbose_name': 'Improvements',
                'verbose_name_plural': 'Improvements',
            },
        ),
        migrations.CreateModel(
            name='NessusConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scanner_name', models.CharField(db_index=True, max_length=190, unique=True)),
                ('enabled', models.BooleanField(default=True)),
                ('scanner_config', models.JSONField(default=reportgen.models.default_json_keys)),
            ],
            options={
                'verbose_name': 'Nessus Scanner Configurations',
                'verbose_name_plural': 'Nessus Scanner Configurations',
            },
        ),
        migrations.CreateModel(
            name='RiskLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('risk_level_name', models.CharField(db_index=True, max_length=190)),
                ('risk_matrix_row', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
                ('risk_matrix_col', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
            ],
            options={
                'verbose_name': 'Risk Levels',
                'verbose_name_plural': 'Risk Levels',
            },
        ),
        migrations.CreateModel(
            name='RTContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rt_name', models.CharField(db_index=True, max_length=190)),
                ('rt_contact', models.TextField()),
            ],
            options={
                'verbose_name': 'RT Contacts',
                'verbose_name_plural': 'RT Contacts',
            },
        ),
        migrations.CreateModel(
            name='ScoreOverride',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score_override_name', models.CharField(db_index=True, max_length=190)),
                ('score_override_value', models.FloatField(default=10.0, validators=[django.core.validators.MaxValueValidator(10.0), django.core.validators.MinValueValidator(0.0)])),
            ],
            options={
                'verbose_name': 'Score Overrides',
                'verbose_name_plural': 'Score Overrides',
            },
        ),
        migrations.CreateModel(
            name='Strength',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strength_subtle', models.TextField()),
                ('strength_screenshot', models.ImageField(blank=True, upload_to='strengths/')),
            ],
            options={
                'verbose_name': 'Strengths',
                'verbose_name_plural': 'Strengths',
            },
        ),
        migrations.CreateModel(
            name='TestFrom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_from_name', models.CharField(db_index=True, max_length=190)),
                ('test_from_value', models.CharField(db_index=True, max_length=190)),
            ],
            options={
                'verbose_name': 'Test From Types',
                'verbose_name_plural': 'Test From Types',
            },
        ),
        migrations.CreateModel(
            name='TestType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_name', models.CharField(db_index=True, max_length=190)),
                ('test_value', models.CharField(db_index=True, max_length=190)),
            ],
            options={
                'verbose_name': 'Test Types',
                'verbose_name_plural': 'Test Types',
            },
        ),
        migrations.CreateModel(
            name='EngagementFindingGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('engagement_name', models.CharField(db_index=True, max_length=190)),
                ('findings', models.ManyToManyField(to='reportgen.finding')),
            ],
            options={
                'verbose_name': 'Engagement Findings Group',
                'verbose_name_plural': 'Engagement Findings Group',
            },
        ),
        migrations.AddField(
            model_name='finding',
            name='screenshots',
            field=models.ManyToManyField(blank=True, to='reportgen.findingscreenshot'),
        ),
        migrations.CreateModel(
            name='NessusImportHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scan_id', models.IntegerField()),
                ('history_id', models.IntegerField()),
                ('scanner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reportgen.nessusconfig')),
            ],
            options={
                'verbose_name': 'Nessus Scan Import History',
                'verbose_name_plural': 'Nessus Scan Import History',
            },
        ),
        migrations.CreateModel(
            name='SolutionOverride',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vulnerability_title', models.TextField(default='')),
                ('solution_body', models.TextField(default='')),
                ('see_also', models.TextField(blank=True, default='', null=True)),
                ('screenshots', models.ManyToManyField(blank=True, to='reportgen.findingscreenshot')),
            ],
            options={
                'verbose_name': 'Solution Overrides',
                'verbose_name_plural': 'Solution Overrides',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_for', models.CharField(db_index=True, max_length=190)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('scope_internal', models.TextField(blank=True, null=True)),
                ('scope_external', models.TextField(blank=True, null=True)),
                ('scope_wifi', models.TextField(blank=True, null=True)),
                ('special_considerations', models.TextField(blank=True, null=True)),
                ('compromise_success', models.BooleanField(default=True)),
                ('filter_to_scores', models.BooleanField(default=True)),
                ('client_contacts', models.ManyToManyField(to='reportgen.clientcontact')),
                ('findings', models.ManyToManyField(to='reportgen.engagementfindinggroup')),
                ('improvement_areas', models.ManyToManyField(to='reportgen.improvement')),
                ('risk_level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reportgen.risklevel')),
                ('rt_contacts', models.ManyToManyField(to='reportgen.rtcontact')),
                ('score_overrides', models.ManyToManyField(blank=True, to='reportgen.scoreoverride')),
                ('solution_overrides', models.ManyToManyField(blank=True, to='reportgen.solutionoverride')),
                ('strengths', models.ManyToManyField(to='reportgen.strength')),
                ('test_from', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reportgen.testfrom')),
                ('test_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reportgen.testtype')),
            ],
            options={
                'verbose_name': 'Pentest Report',
                'verbose_name_plural': 'Pentest Report',
            },
        ),
    ]
